{"version":3,"file":"static/js/186.82d65cc9.chunk.js","mappings":"2OAwCA,UAnCgB,WACZ,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACN,GAAKL,EAAL,CAGA,IAAMM,EAAY,mCAAG,8GAEMC,EAAAA,EAAAA,IAAYP,GAFlB,OAEPQ,EAFO,OAGbJ,EAAWI,EAAKC,SAHH,qDAIRC,SACLC,IAAAA,OAAAA,QAAwB,qCALX,yDAAH,qDAQlBL,GATC,CAUJ,GAAE,CAACN,IAEJ,IAAMY,EAAUT,EAAQU,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACxB,2BACI,uBAAKD,KACL,uBAAKC,MAFAf,EADe,IAM5B,OACE,8BACMG,GAAWA,EAAQa,OAAS,GACxB,wBAAKJ,KACL,uEAIf,C,8MCpCKK,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,kCAIPC,EAAiB,+BAGVC,EAAiB,mCAAG,sGACNJ,EAASK,IAAT,gFADM,uBACrBd,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qDAKjBe,EAAY,mCAAG,WAAOC,GAAP,yFACDP,EAASK,IAAT,gBAAsBE,EAAtB,oEADC,uBAChBhB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAMZiB,EAAc,mCAAG,WAAOC,GAAP,yFACHT,EAASK,IAAT,gHAAsHI,IADnH,uBAClBlB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKdD,EAAW,mCAAG,WAAOP,GAAP,yFACAiB,EAASK,IAAT,gBAAsBtB,EAAtB,4EADA,uBACfQ,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXmB,EAAO,mCAAG,WAAO3B,GAAP,yFACIiB,EAASK,IAAT,gBAAsBtB,EAAtB,qEADJ,uBACXQ,EADW,EACXA,KADW,kBAEZA,GAFY,2CAAH,sDAKPoB,EAAgB,SAACC,GAAuB,IAAjBC,EAAgB,uDAAR,IACxC,OAAOD,EAAOT,EAAoBU,EAAQD,EAA/B,sCAAqEC,EAArE,YAAoF,IAANA,EAC5F,C","sources":["components/Reviews/Reviews.jsx","components/shared/ApiService/ApiService.jsx"],"sourcesContent":["import {useParams} from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { getReviewes }  from \"../shared/ApiService/ApiService\";\nimport Notiflix from 'notiflix';\n\nconst Reviews = () => {\n    const { id } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        if (!id) {\n            return;\n        }\n        const fetchReviews = async () => {\n            try {\n                const data = await getReviewes(id);\n                setReviews(data.results);\n            } catch({response}) {\n                Notiflix.Notify.failure('Oops â€“ something went wrong!');\n            }\n        };\n        fetchReviews();\n    }, [id]);\n\n    const element = reviews.map(({ id, author, content }) =>\n        <li key={id}>\n            <p>{ author }</p>\n            <p>{ content }</p>\n        </li>);\n\n    return (\n      <>\n          { reviews && reviews.length > 0\n              ? <ul>{element}</ul>\n              : <div>We don't have any reviews for this movie</div>\n          }\n      </>\n    )\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\"\n});\n\n// const BIG_POSTER_PATH = `https://image.tmdb.org/t/p/original`;\nconst SMALL_POSTER_PATH = `https://image.tmdb.org/t/p/w`;\n\n\nexport const getTrendingMovies = async() => {\n    const { data } = await instance.get(`movie/popular?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\nexport const getMovieById = async (movie_id) => {\n    const { data } = await instance.get(`movie/${movie_id}?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\n\nexport const getSearchMovie = async (title) => {\n    const { data } = await instance.get(`search/movie?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1&include_adult=false&query=${title}`);\n    return data;\n};\n\nexport const getReviewes = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\nexport const getCast = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US`);\n    return data;\n};\n\nexport const getPosterPath = (path, width = 500) => {\n    return path ? SMALL_POSTER_PATH + width + path : `https://via.placeholder.com/${width}x${width*1.5}`;\n};\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","fetchReviews","getReviewes","data","results","response","Notiflix","element","map","author","content","length","instance","axios","baseURL","SMALL_POSTER_PATH","getTrendingMovies","get","getMovieById","movie_id","getSearchMovie","title","getCast","getPosterPath","path","width"],"sourceRoot":""}
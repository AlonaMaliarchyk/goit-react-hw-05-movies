{"version":3,"file":"static/js/76.df31adbb.chunk.js","mappings":"oPACA,EAA8B,0BAA9B,EAAmE,uB,2BC2CnE,EAtCa,WACT,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAQP,GAFjB,OAEJQ,EAFI,OAGJL,EAAO,GACbK,EAAKL,KAAKM,SAAQ,SAAAC,GACYP,EAAKQ,MAAK,SAAAC,GAAe,OAAIA,EAAgBZ,KAAOU,EAAQV,EAAnC,KAEnDG,EAAKU,KAAKH,EAEb,IAEDN,EAAQD,GAXE,qDAYHW,SACPC,IAAAA,OAAAA,QAAwB,qCAbd,yDAAH,qDAgBfT,GACH,GAAE,CAACN,IAEJ,IAAMU,EAAUP,EAAKa,KAAI,gBAAGhB,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACrB,gBAAaC,UAAWC,EAAxB,WACI,gBAAKC,KAAMC,EAAAA,EAAAA,IAAcL,EAAc,KAAOM,IAAKL,KACnD,6BAAKA,OAFAlB,EADY,IAKzB,OACA,8BACMG,GAAQA,EAAKqB,OAAS,GACd,eAAIL,UAAWC,EAAf,SAAiCV,KACjC,oEAIjB,C,8MCzCKe,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,kCAIPC,EAAiB,+BAGVC,EAAiB,mCAAG,sGACNJ,EAASK,IAAT,gFADM,uBACrBtB,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qDAKjBuB,EAAY,mCAAG,WAAOC,GAAP,yFACDP,EAASK,IAAT,gBAAsBE,EAAtB,oEADC,uBAChBxB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAMZyB,EAAc,mCAAG,WAAOC,GAAP,yFACHT,EAASK,IAAT,gHAAsHI,IADnH,uBAClB1B,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKd2B,EAAW,mCAAG,WAAOnC,GAAP,yFACAyB,EAASK,IAAT,gBAAsB9B,EAAtB,4EADA,uBACfQ,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXD,EAAO,mCAAG,WAAOP,GAAP,yFACIyB,EAASK,IAAT,gBAAsB9B,EAAtB,qEADJ,uBACXQ,EADW,EACXA,KADW,kBAEZA,GAFY,2CAAH,sDAKPc,EAAgB,SAACc,GAAuB,IAAjBC,EAAgB,uDAAR,IACxC,OAAOD,EAAOR,EAAoBS,EAAQD,EAA/B,sCAAqEC,EAArE,YAAoF,IAANA,EAC5F,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","components/shared/ApiService/ApiService.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castGallery\":\"Cast_castGallery__CjqGL\",\"castItem\":\"Cast_castItem__-Jcfe\"};","import {useParams} from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport {getCast, getPosterPath} from \"../shared/ApiService/ApiService\";\nimport css from \"./Cast.module.css\"\nimport Notiflix from 'notiflix';\n\nconst Cast = () => {\n    const { id } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                const data = await getCast(id);\n                const cast = [];\n                data.cast.forEach(element => {\n                  const alreadyExistElement = cast.find(existingElement => existingElement.id === element.id);\n                  if (!alreadyExistElement) {\n                    cast.push(element);\n                  }\n                });\n\n                setCast(cast);\n            } catch ({ response }) {\n                Notiflix.Notify.failure('Oops â€“ something went wrong!');\n            }\n        };\n        fetchCast();\n    }, [id]);\n\n    const element = cast.map(({ id, profile_path, name }) =>\n        <li key={id} className={css.castItem}>\n            <img src={ getPosterPath(profile_path, 200) } alt={name}/>\n            <p> {name}</p>\n        </li>);\n    return (\n    <>\n        { cast && cast.length > 0\n                ? <ul className={css.castGallery}>{element}</ul>\n                : <div>We don't have any cast for this movie</div>\n            }\n    </>\n)\n};\nexport default Cast;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\"\n});\n\n// const BIG_POSTER_PATH = `https://image.tmdb.org/t/p/original`;\nconst SMALL_POSTER_PATH = `https://image.tmdb.org/t/p/w`;\n\n\nexport const getTrendingMovies = async() => {\n    const { data } = await instance.get(`movie/popular?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\nexport const getMovieById = async (movie_id) => {\n    const { data } = await instance.get(`movie/${movie_id}?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\n\nexport const getSearchMovie = async (title) => {\n    const { data } = await instance.get(`search/movie?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1&include_adult=false&query=${title}`);\n    return data;\n};\n\nexport const getReviewes = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n};\n\nexport const getCast = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US`);\n    return data;\n};\n\nexport const getPosterPath = (path, width = 500) => {\n    return path ? SMALL_POSTER_PATH + width + path : `https://via.placeholder.com/${width}x${width*1.5}`;\n};\n"],"names":["id","useParams","useState","cast","setCast","useEffect","fetchCast","getCast","data","forEach","element","find","existingElement","push","response","Notiflix","map","profile_path","name","className","css","src","getPosterPath","alt","length","instance","axios","baseURL","SMALL_POSTER_PATH","getTrendingMovies","get","getMovieById","movie_id","getSearchMovie","title","getReviewes","path","width"],"sourceRoot":""}
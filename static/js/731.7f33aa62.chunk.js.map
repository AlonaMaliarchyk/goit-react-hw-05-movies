{"version":3,"file":"static/js/731.7f33aa62.chunk.js","mappings":"6OACA,EAAsB,4B,SCoBtB,EAjBuB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAMtB,OACI,kBAAMA,SANW,SAAAC,GACjBA,EAAMC,iBACNF,EAASC,EAAME,OAAOC,OAAOC,OAC7BJ,EAAME,OAAOG,OAChB,EAEG,WACI,kBACIC,KAAK,SACLC,KAAK,OACLC,YAAY,gBAEhB,mBAASC,UAAWC,EAASH,KAAK,SAAlC,sBAGX,E,mCCqBD,EAlCkB,WACd,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAOMC,EAAQF,EAAaG,IAAI,SAiB/B,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,gGAENH,EAFM,kEAKQI,EAAAA,EAAAA,IAAeJ,GALvB,OAKLK,EALK,OAMXT,GAAU,SAAAU,GAAS,OAAKD,EAAKE,OAAV,IANR,gDASXC,IAAAA,OAAAA,QAAwB,qCATb,yDAAH,qDAYhBL,GACH,GAAE,CAACH,KAEA,iCACI,SAAC,EAAD,CAAgBlB,SAxBJ,SAACK,GACbA,GACAY,EAAgB,CAAE,MAASZ,GAElC,KAqBO,SAACsB,EAAA,EAAD,CAAiBC,MAAQf,MAGpC,EC7BD,EAPmB,WACf,OACI,+BACI,SAACgB,EAAD,KAGX,C,8MCPKC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,kCAIPC,EAAiB,+BAGVC,EAAiB,mCAAG,sGACNJ,EAASX,IAAT,gFADM,uBACrBI,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qDAKjBY,EAAY,mCAAG,WAAOC,GAAP,yFACDN,EAASX,IAAT,gBAAsBiB,EAAtB,oEADC,uBAChBb,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAMZD,EAAc,mCAAG,WAAOe,GAAP,yFACHP,EAASX,IAAT,gHAAsHkB,IADnH,uBAClBd,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKde,EAAW,mCAAG,WAAOC,GAAP,yFACAT,EAASX,IAAT,gBAAsBoB,EAAtB,4EADA,uBACfhB,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXiB,EAAO,mCAAG,WAAOD,GAAP,yFACIT,EAASX,IAAT,gBAAsBoB,EAAtB,qEADJ,uBACXhB,EADW,EACXA,KADW,kBAEZA,GAFY,2CAAH,sDAKPkB,EAAgB,SAACC,GAAuB,IAAjBC,EAAgB,uDAAR,IACxC,OAAOD,EAAOT,EAAoBU,EAAQD,EAAO,8BACpD,C,2ECrCD,EAAgC,uCAAhC,EAAmF,mCAAnF,EAAuI,wC,kBCqBvI,EAjBwB,SAAC,GAAe,IAAbd,EAAY,EAAZA,MACjBgB,GAAWC,EAAAA,EAAAA,MACXC,EAAUlB,EAAMmB,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,YAAaX,EAApB,EAAoBA,MAApB,OACtB,UAAC,KAAD,CAAMY,GAAE,kBAAaV,GAAM7B,UAAWC,EAA6BuC,MAAO,CAAEC,KAAMP,GAAlF,WACI,eAAIlC,UAAWC,EAAf,UACI,gBAAKyC,IAAKJ,GAAaP,EAAAA,EAAAA,IAAcO,EAAa,KAAM,sCAAuCK,IAAKhB,OAExG,uBAAIA,MAJuDE,EADzC,IAO1B,OACI,+BACA,eAAI7B,UAAWC,EAAf,SACKmC,KAIZ,C","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetails/FilmSearch/PostSearchForm/PostSearchForm.module.css?3d79","components/MovieDetails/FilmSearch/PostSearchForm/PostSearchForm.jsx","components/MovieDetails/FilmSearch/FilmSearch.jsx","components/page/MoviesPage/MoviesPage.jsx","components/shared/ApiService/ApiService.jsx","webpack://goit-react-hw-05-movies/./src/components/shared/MovieSearchList/MovieSearchList.module.css?434f","components/shared/MovieSearchList/MovieSearchList.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"PostSearchForm_btn__+HxE5\"};","\nimport PropTypes from \"prop-types\";\nimport css from \"./PostSearchForm.module.css\"\n\nconst PostSearchForm = ({ onSubmit }) => {\n    const handleSubmit = event => {\n        event.preventDefault();\n        onSubmit(event.target.search.value);\n        event.target.reset();\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                name=\"search\"\n                type=\"text\"\n                placeholder=\"Movie name\">\n                </input>\n            <button  className={css.btn} type=\"submit\">Search</button>    \n        </form>\n    )\n}\nexport default PostSearchForm;\nPostSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","import {getSearchMovie}  from \"../../shared/ApiService/ApiService\";\nimport { useState, useEffect } from \"react\";\nimport PostSearchForm from \"./PostSearchForm/PostSearchForm\";\nimport MovieSearchList from \"../../shared/MovieSearchList/MovieSearchList\";\nimport { useSearchParams } from \"react-router-dom\";\nimport Notiflix from 'notiflix';\n\nconst FilmSerch = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const searchMovie = (value) => {\n        if (value) {\n            setSearchParams({ 'query': value });\n        } \n    }\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        const fetchMovie = async () => {\n            try {\n                if (!query) {\n                    return;\n                }\n                const data = await getSearchMovie(query);\n                setMovies(prevFilms => (data.results));\n            }\n            catch  {\n                Notiflix.Notify.failure('Oops â€“ something went wrong!');\n            }\n        }\n        fetchMovie();\n    }, [query]);\n    return (\n        <>\n            <PostSearchForm onSubmit={searchMovie} />\n            <MovieSearchList films={ movies } />\n        </>\n    )\n}\n\nexport default FilmSerch;","import FilmSearch from \"../../MovieDetails/FilmSearch\";\n\n\nconst MoviesPage = ()=>{\n    return (\n        <>\n            <FilmSearch/>\n        </>\n    )\n}\nexport default MoviesPage;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\"\n})\n\n// const BIG_POSTER_PATH = `https://image.tmdb.org/t/p/original`;\nconst SMALL_POSTER_PATH = `https://image.tmdb.org/t/p/w`;\n\n\nexport const getTrendingMovies = async() => {\n    const { data } = await instance.get(`movie/popular?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\nexport const getMovieById = async (movie_id) => {\n    const { data } = await instance.get(`movie/${movie_id}?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\n\nexport const getSearchMovie = async (title) => {\n    const { data } = await instance.get(`search/movie?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1&include_adult=false&query=${title}`);\n    return data;\n}\n\nexport const getReviewes = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\nexport const getCast = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US`);\n    return data;\n}\n\nexport const getPosterPath = (path, width = 500) => {\n    return path ? SMALL_POSTER_PATH + width + path : 'https://via.placeholder.com/';\n}","// extracted by mini-css-extract-plugin\nexport default {\"searchGallery\":\"MovieSearchList_searchGallery__tEkpk\",\"seachList\":\"MovieSearchList_seachList__E+XTu\",\"wrapSearchList\":\"MovieSearchList_wrapSearchList__GExxH\"};","\nimport { Link, useLocation } from \"react-router-dom\";\nimport css from \"./MovieSearchList.module.css\";\nimport { getPosterPath } from \"../ApiService/ApiService\";\n\nconst MovieSearchList = ({ films }) => {\n    const location = useLocation();\n    const element = films.map(({ id, poster_path, title }) =>\n        <Link to={`/movies/${id}`} className={css.wrapSearchList} key={id} state={{ from: location }}>\n            <li className={css.seachList } >\n                <img src={poster_path? getPosterPath(poster_path, 300): 'https://via.placeholder.com/320x480'} alt={title}></img>\n            </li>\n            <p>{title}</p>\n        </Link>);\n    return (\n        <>\n        <ul className={css.searchGallery}>\n            {element}\n        </ul>\n        </>\n    )\n}\nexport default MovieSearchList;"],"names":["onSubmit","event","preventDefault","target","search","value","reset","name","type","placeholder","className","css","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovie","getSearchMovie","data","prevFilms","results","Notiflix","MovieSearchList","films","FilmSearch","instance","axios","baseURL","SMALL_POSTER_PATH","getTrendingMovies","getMovieById","movie_id","title","getReviewes","id","getCast","getPosterPath","path","width","location","useLocation","element","map","poster_path","to","state","from","src","alt"],"sourceRoot":""}
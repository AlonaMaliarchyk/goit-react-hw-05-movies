{"version":3,"file":"static/js/536.8229f20a.chunk.js","mappings":"2OA4CA,UAvCgB,WACZ,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACN,GAAKP,EAAL,CAGA,IAAMQ,EAAW,mCAAG,8GAEOC,EAAAA,EAAAA,IAAYT,GAFnB,OAENU,EAFM,OAGZN,EAAWM,EAAKC,SAHJ,qDAKTC,SACHN,EAASD,EAAMQ,SACfC,IAAAA,OAAAA,QAAwB,qCAPZ,qGAAH,qDAYjBN,GAbC,CAcJ,GAAE,CAACR,EAAIK,IAER,IAAMU,EAAUZ,EAAQa,KAAI,gBAAGhB,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACxB,2BACI,uBAAKD,KACL,uBAAKC,MAFAlB,EADe,IAK5B,OACA,8BACUG,GAAWA,EAAQgB,OAAS,GACxB,wBAAKJ,KACL,uEAIjB,C,8MCxCKK,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,kCAIPC,EAAiB,+BAGVC,EAAiB,mCAAG,sGACNJ,EAASK,IAAT,gFADM,uBACrBf,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qDAKjBgB,EAAY,mCAAG,WAAOC,GAAP,yFACDP,EAASK,IAAT,gBAAsBE,EAAtB,oEADC,uBAChBjB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAMZkB,EAAc,mCAAG,WAAOC,GAAP,yFACHT,EAASK,IAAT,gHAAsHI,IADnH,uBAClBnB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKdD,EAAW,mCAAG,WAAOT,GAAP,yFACAoB,EAASK,IAAT,gBAAsBzB,EAAtB,4EADA,uBACfU,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXoB,EAAO,mCAAG,WAAO9B,GAAP,yFACIoB,EAASK,IAAT,gBAAsBzB,EAAtB,qEADJ,uBACXU,EADW,EACXA,KADW,kBAEZA,GAFY,2CAAH,sDAKPqB,EAAgB,SAACC,GAAuB,IAAjBC,EAAgB,uDAAR,IACxC,OAAOD,EAAOT,EAAoBU,EAAQD,EAAO,8BACpD,C","sources":["components/MovieDetails/Reviews/Reviews.jsx","components/shared/ApiService/ApiService.jsx"],"sourcesContent":["import {useParams} from \"react-router-dom\";\nimport { useState, useEffect, } from \"react\";\nimport  {getReviewes}  from \"../../shared/ApiService/ApiService\";\nimport Notiflix from 'notiflix';\n\nconst Reviews = () => {\n    const { id } = useParams();\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if (!id) {\n            return;\n        }\n        const fethReviews = async () => {\n            try {\n                const data = await getReviewes(id);\n                setReviews(data.results);\n            }\n            catch({response}){\n                setError(error.message);\n                Notiflix.Notify.failure('Oops â€“ something went wrong!');\n            }\n            finally {\n            }\n        }\n        fethReviews();\n    }, [id, error]);\n\n    const element = reviews.map(({ id, author, content }) =>\n        <li key={id}>\n            <p>{ author }</p> \n            <p>{ content }</p> \n        </li>)\n    return (\n    <>\n            { reviews && reviews.length > 0\n                ? <ul>{element}</ul>\n                : <div>We don't have any reviews for this movie</div>\n            }\n    </>\n    )\n}\n\nexport default Reviews;\n\n\n/*\n<p>{author ? author :`We don't have any reviews for this movie`}</p> \n<p>{content ? content :`We don't have any reviews for this movie`}</p> \n*/","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\"\n})\n\n// const BIG_POSTER_PATH = `https://image.tmdb.org/t/p/original`;\nconst SMALL_POSTER_PATH = `https://image.tmdb.org/t/p/w`;\n\n\nexport const getTrendingMovies = async() => {\n    const { data } = await instance.get(`movie/popular?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\nexport const getMovieById = async (movie_id) => {\n    const { data } = await instance.get(`movie/${movie_id}?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\n\nexport const getSearchMovie = async (title) => {\n    const { data } = await instance.get(`search/movie?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1&include_adult=false&query=${title}`);\n    return data;\n}\n\nexport const getReviewes = async (id) => {\n    const { data } = await instance.get(`movie/${id}/reviews?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US&page=1`);\n    return data;\n}\n\nexport const getCast = async (id) => {\n    const { data } = await instance.get(`movie/${id}/credits?api_key=1db949d546d8184041e5d93169d90d9f&language=en-US`);\n    return data;\n}\n\nexport const getPosterPath = (path, width = 500) => {\n    return path ? SMALL_POSTER_PATH + width + path : 'https://via.placeholder.com/';\n}"],"names":["id","useParams","useState","reviews","setReviews","error","setError","useEffect","fethReviews","getReviewes","data","results","response","message","Notiflix","element","map","author","content","length","instance","axios","baseURL","SMALL_POSTER_PATH","getTrendingMovies","get","getMovieById","movie_id","getSearchMovie","title","getCast","getPosterPath","path","width"],"sourceRoot":""}